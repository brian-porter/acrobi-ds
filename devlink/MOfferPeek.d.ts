import * as React from "react";
import * as Types from "./types";

declare function MOfferPeek(props: {
  as?: React.ElementType;
  heroImgSrc?: Types.Asset.Image;
  heroImgAlt?: Types.Basic.AltText;
  heroQrClick?: Types.Devlink.RuntimeProps;
  heroMoreClick?: Types.Devlink.RuntimeProps;
  heroTitleSrc?: React.ReactNode;
  heroSubtxtSrc?: React.ReactNode;
  heroSubtxt2Src?: React.ReactNode;
  heroProfClick?: Types.Devlink.RuntimeProps;
  heroBtnIcnSrc?: React.ReactNode;
  heroBtnTxtSrc?: React.ReactNode;
  heroBtnClick?: Types.Devlink.RuntimeProps;
  scanClick?: Types.Devlink.RuntimeProps;
  shareClick?: Types.Devlink.RuntimeProps;
  marketClick?: Types.Devlink.RuntimeProps;
  clipper?: Types.Visibility.VisibilityConditions;
  clipperClick?: Types.Devlink.RuntimeProps;
  muteClick?: Types.Devlink.RuntimeProps;
  typeSrc?: React.ReactNode;
  limitSrc?: React.ReactNode;
  rewardSrc?: React.ReactNode;
  endsSrc?: React.ReactNode;
  detSrc?: React.ReactNode;
  notesChange?: Types.Builtin.Text;
  notesClick?: Types.Devlink.RuntimeProps;
  sheet?: Types.Visibility.VisibilityConditions;
  sheetMap?: Types.Devlink.Slot;
  examplesSellerExample?: Types.Visibility.VisibilityConditions;
  examplesSelrEmpty?: Types.Visibility.VisibilityConditions;
  examplesSelrGrid?: Types.Visibility.VisibilityConditions;
  examplesSelrCloseClick?: Types.Devlink.RuntimeProps;
  examplesSelrMap?: Types.Devlink.Slot;
  examplesExampleSeller?: Types.Visibility.VisibilityConditions;
  examplesSelrVizSrc?: Types.Asset.Image;
  examplesSelrVizAlt?: Types.Basic.AltText;
  examplesSelrNameSrc?: React.ReactNode;
  examplesSelrCellClick?: Types.Devlink.RuntimeProps;
  examplesSelrEmptyPrimeClick?: Types.Devlink.RuntimeProps;
  examplesMuteExample?: Types.Visibility.VisibilityConditions;
  examplesMute24HOn?: Types.Visibility.VisibilityConditions;
  examplesMute2DOn?: Types.Visibility.VisibilityConditions;
  examplesMute1WOn?: Types.Visibility.VisibilityConditions;
  examplesMute2WOn?: Types.Visibility.VisibilityConditions;
  examplesMute1MOn?: Types.Visibility.VisibilityConditions;
  examplesMute3MOn?: Types.Visibility.VisibilityConditions;
  examplesMute6MOn?: Types.Visibility.VisibilityConditions;
  examplesMuteAllOn?: Types.Visibility.VisibilityConditions;
  examplesMuteCloseClick?: Types.Devlink.RuntimeProps;
  examplesMute24HClick?: Types.Devlink.RuntimeProps;
  examplesMute2DClick?: Types.Devlink.RuntimeProps;
  examplesMute1WClick?: Types.Devlink.RuntimeProps;
  examplesMute2WClick?: Types.Devlink.RuntimeProps;
  examplesMute1MClick?: Types.Devlink.RuntimeProps;
  examplesMute3MClick?: Types.Devlink.RuntimeProps;
  examplesMute6MClick?: Types.Devlink.RuntimeProps;
  examplesMuteAllClick?: Types.Devlink.RuntimeProps;
  examplesMuteDoClick?: Types.Devlink.RuntimeProps;
  examplesClipperExample?: Types.Visibility.VisibilityConditions;
  examplesCliprCloseClick?: Types.Devlink.RuntimeProps;
  examplesCliprEmpty?: Types.Visibility.VisibilityConditions;
  examplesCliprGrid?: Types.Visibility.VisibilityConditions;
  examplesCliprMap?: Types.Devlink.Slot;
  examplesClipperGridExample?: Types.Visibility.VisibilityConditions;
  examplesCliprVizSrc?: Types.Asset.Image;
  examplesCliprVizAlt?: Types.Basic.AltText;
  examplesCliprNameSrc?: React.ReactNode;
  examplesCliprHandleSrc?: React.ReactNode;
  examplesCliprCellClick?: Types.Devlink.RuntimeProps;
}): React.JSX.Element;
