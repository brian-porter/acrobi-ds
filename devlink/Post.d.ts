import * as React from "react";
import * as Types from "./types";

declare function Post(props: {
  as?: React.ElementType;
  post?: Types.Visibility.VisibilityConditions;
  id?: Types.Basic.IdTextInput;
  header?: Types.Visibility.VisibilityConditions;
  rating?: Types.Visibility.VisibilityConditions;
  rank?: Types.Visibility.VisibilityConditions;
  hdrImgSrc?: Types.Asset.Image;
  hdrImgAlt?: Types.Basic.AltText;
  hdrImgSz?: Types.Builtin.Text;
  hdrTitleSrc?: React.ReactNode;
  hdrTitleSz?: Types.Builtin.Text;
  hdrSubtxt?: Types.Visibility.VisibilityConditions;
  hdrSubtxtSrc?: React.ReactNode;
  rankMoreClick?: Types.Devlink.RuntimeProps;
  rankQty?: React.ReactNode;
  rankLessClick?: Types.Devlink.RuntimeProps;
  gttrPin?: Types.Visibility.VisibilityConditions;
  gttrAlarm?: Types.Visibility.VisibilityConditions;
  gttrBookmark?: Types.Visibility.VisibilityConditions;
  postMoreClick?: Types.Devlink.RuntimeProps;
  postTime?: React.ReactNode;
  title?: Types.Visibility.VisibilityConditions;
  titleSrc?: React.ReactNode;
  ratingSrc?: React.ReactNode;
  bodySrc?: React.ReactNode;
  bodyAcrd?: Types.Visibility.VisibilityConditions;
  bodyAcrdClick?: Types.Devlink.RuntimeProps;
  bodyAcrdTxtSrc?: React.ReactNode;
  bodyAcrdIcnSrc?: React.ReactNode;
  media?: Types.Visibility.VisibilityConditions;
  mediaMap?: Types.Devlink.Slot;
  mediaExample?: Types.Visibility.VisibilityConditions;
  atrb?: Types.Visibility.VisibilityConditions;
  atrbAvtr?: Types.Asset.Image;
  atrbAvtrAlt?: Types.Basic.AltText;
  atrbName?: React.ReactNode;
  atrbBdg?: Types.Visibility.VisibilityConditions;
  atrbStat1?: Types.Visibility.VisibilityConditions;
  atrbStat1Icn?: Types.Visibility.VisibilityConditions;
  atrbStat1TxtSrc?: React.ReactNode;
  atrbStat1IcnSrc?: React.ReactNode;
  atrbClick?: Types.Devlink.RuntimeProps;
  act?: Types.Visibility.VisibilityConditions;
  actLike?: Types.Visibility.VisibilityConditions;
  actLikeQty?: Types.Visibility.VisibilityConditions;
  actLikeQtySrc?: React.ReactNode;
  actLikeIcnSrc?: React.ReactNode;
  actLikeClick?: Types.Devlink.RuntimeProps;
  actComment?: Types.Visibility.VisibilityConditions;
  actCommentQty?: Types.Visibility.VisibilityConditions;
  actCommentQtySrc?: React.ReactNode;
  actCommentIcnSrc?: React.ReactNode;
  actCommentClick?: Types.Devlink.RuntimeProps;
  actGive?: Types.Visibility.VisibilityConditions;
  actGiveIcnSrc?: React.ReactNode;
  actGiveClick?: Types.Devlink.RuntimeProps;
  actShare?: Types.Visibility.VisibilityConditions;
  actShareClick?: Types.Devlink.RuntimeProps;
  actBookmark?: Types.Visibility.VisibilityConditions;
  actBookmarkIcnSrc?: React.ReactNode;
  actBookmarkClick?: Types.Devlink.RuntimeProps;
  resp?: Types.Visibility.VisibilityConditions;
  respQty?: React.ReactNode;
  respName?: React.ReactNode;
  respList?: Types.Visibility.VisibilityConditions;
  respListMap?: Types.Devlink.Slot;
  respItemExample?: Types.Visibility.VisibilityConditions;
  respEmpty?: Types.Visibility.VisibilityConditions;
  respEmptyIcnSrc?: React.ReactNode;
  respEmptyHlineSrc?: React.ReactNode;
  respEmptySubTxtSrc?: React.ReactNode;
  respEmptyCtaTxtSrc?: React.ReactNode;
  respEmptyClick?: Types.Devlink.RuntimeProps;
}): React.JSX.Element;
