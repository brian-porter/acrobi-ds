import * as React from "react";
import * as Types from "./types";

declare function GridSecOffer(props: {
  as?: React.ElementType;
  sec?: Types.Visibility.VisibilityConditions;
  secHead?: Types.Visibility.VisibilityConditions;
  secHeadTitleIcn?: Types.Visibility.VisibilityConditions;
  secHeadAct1?: Types.Visibility.VisibilityConditions;
  secHeadTitleIcnSrc?: React.ReactNode;
  secHeadTitleSrc?: React.ReactNode;
  conGrid5?: Types.Visibility.VisibilityConditions;
  conGrid3?: Types.Visibility.VisibilityConditions;
  conCellMap?: Types.Devlink.Slot;
  conSlotId?: Types.Basic.IdTextInput;
  conCellExample?: Types.Visibility.VisibilityConditions;
  exampleVizSrc?: Types.Asset.Image;
  exampleVizAlt?: Types.Basic.AltText;
  exampleNameSrc?: React.ReactNode;
  exampleHookSrc?: React.ReactNode;
  exampleByVizSrc?: Types.Asset.Image;
  exampleTypeSrc?: React.ReactNode;
  exampleLimitSrc?: React.ReactNode;
  exampleActClick?: Types.Devlink.RuntimeProps;
  exampleCellClick?: Types.Devlink.RuntimeProps;
  secHeadAct1TxtSrc?: React.ReactNode;
  secHeadAct1Click?: Types.Devlink.RuntimeProps;
  emptyEmpty?: Types.Visibility.VisibilityConditions;
  emptySecBtn?: Types.Visibility.VisibilityConditions;
  emptyTirBtn?: Types.Visibility.VisibilityConditions;
  emptyBtmDoc?: Types.Visibility.VisibilityConditions;
  emptyIcnSrc?: React.ReactNode;
  emptyHeadlineSrc?: React.ReactNode;
  emptySubtxtSrc?: React.ReactNode;
  emptySecBtnTxtSrc?: React.ReactNode;
  emptyTirBtnTxtSrc?: React.ReactNode;
  emptyPrimeBtnTxtSrc?: React.ReactNode;
  emptyPrimeBtnStyl?: Types.Builtin.Text;
  emptySecBtnClick?: Types.Devlink.RuntimeProps;
  emptyTirBtnClick?: Types.Devlink.RuntimeProps;
  emptyPrimeBtnClick?: Types.Devlink.RuntimeProps;
}): React.JSX.Element;
