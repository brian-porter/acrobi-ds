import * as React from "react";
import * as Types from "./types";

declare function MBrandPeek(props: {
  as?: React.ElementType;
  heroImgSrc?: Types.Asset.Image;
  heroImgAlt?: Types.Basic.AltText;
  heroQrClick?: Types.Devlink.RuntimeProps;
  heroMoreClick?: Types.Devlink.RuntimeProps;
  heroAvtrSrc?: Types.Asset.Image;
  heroAvtrAlt?: Types.Basic.AltText;
  heroTitleSrc?: React.ReactNode;
  heroSubtxtSrc?: React.ReactNode;
  heroProfClick?: Types.Devlink.RuntimeProps;
  heroBtnIcnSrc?: React.ReactNode;
  heroBtnTxtSrc?: React.ReactNode;
  heroBtnClick?: Types.Devlink.RuntimeProps;
  favIcnSrc?: React.ReactNode;
  favTxtSrc?: React.ReactNode;
  favClick?: Types.Devlink.RuntimeProps;
  prodClick?: Types.Devlink.RuntimeProps;
  sellerClick?: Types.Devlink.RuntimeProps;
  offClick?: Types.Devlink.RuntimeProps;
  clipClick?: Types.Devlink.RuntimeProps;
  muteClick?: Types.Devlink.RuntimeProps;
  disClick?: Types.Devlink.RuntimeProps;
  setClick?: Types.Devlink.RuntimeProps;
  off?: Types.Visibility.VisibilityConditions;
  dis?: Types.Visibility.VisibilityConditions;
  aboutSrc?: React.ReactNode;
  rankSrc?: React.ReactNode;
  estSrc?: React.ReactNode;
  locationSrc?: React.ReactNode;
  domainSrc?: React.ReactNode;
  domainClick?: Types.Devlink.RuntimeProps;
  socialMap?: Types.Devlink.Slot;
  notesChange?: Types.Builtin.Text;
  notesClick?: Types.Devlink.RuntimeProps;
  sheet?: Types.Visibility.VisibilityConditions;
  sheetMap?: Types.Devlink.Slot;
  examplesSocialExample?: Types.Visibility.VisibilityConditions;
  examplesSocialVizSrc?: Types.Asset.Image;
  examplesSocialVizAlt?: Types.Basic.AltText;
  examplesSocialNameSrc?: React.ReactNode;
  examplesSocialCellClick?: Types.Devlink.RuntimeProps;
  examplesProdExample?: Types.Visibility.VisibilityConditions;
  examplesProdCloseClick?: Types.Devlink.RuntimeProps;
  examplesProdMap?: Types.Devlink.Slot;
  examplesProdGridExample?: Types.Visibility.VisibilityConditions;
  examplesProdVizSrc?: Types.Asset.Image;
  examplesProdVizAlt?: Types.Basic.AltText;
  examplesProdNameSrc?: React.ReactNode;
  examplesProdCellClick?: Types.Devlink.RuntimeProps;
  examplesSellerExample?: Types.Visibility.VisibilityConditions;
  examplesSelrCloseClick?: Types.Devlink.RuntimeProps;
  examplesSelrMap?: Types.Devlink.Slot;
  examplesSellerGridExample?: Types.Visibility.VisibilityConditions;
  examplesSelrVizSrc?: Types.Asset.Image;
  examplesSelrVizAlt?: Types.Basic.AltText;
  examplesSelrNameSrc?: React.ReactNode;
  examplesSelrCellClick?: Types.Devlink.RuntimeProps;
  examplesOfferExample?: Types.Visibility.VisibilityConditions;
  examplesOffCloseClick?: Types.Devlink.RuntimeProps;
  examplesOffMap?: Types.Devlink.Slot;
  examplesOfferGridExample?: Types.Visibility.VisibilityConditions;
  examplesOffVizSrc?: Types.Asset.Image;
  examplesOffVizAlt?: Types.Basic.AltText;
  examplesOffActClick?: Types.Devlink.RuntimeProps;
  examplesOffHookSrc?: React.ReactNode;
  examplesOffTypeSrc?: React.ReactNode;
  examplesOffLimitSrc?: React.ReactNode;
  examplesOffCellClick?: Types.Devlink.RuntimeProps;
  examplesClipperExample?: Types.Visibility.VisibilityConditions;
  examplesCliprCloseClick?: Types.Devlink.RuntimeProps;
  examplesCliprEmpty?: Types.Visibility.VisibilityConditions;
  examplesCliprGrid?: Types.Visibility.VisibilityConditions;
  examplesCliprMap?: Types.Devlink.Slot;
  examplesClipperGridExample?: Types.Visibility.VisibilityConditions;
  examplesCliprVizSrc?: Types.Asset.Image;
  examplesCliprVizAlt?: Types.Basic.AltText;
  examplesCliprNameSrc?: React.ReactNode;
  examplesCliprHandleSrc?: React.ReactNode;
  examplesCliprCellClick?: Types.Devlink.RuntimeProps;
  examplesMuteExample?: Types.Visibility.VisibilityConditions;
  examplesDisExample?: Types.Visibility.VisibilityConditions;
}): React.JSX.Element;
