import * as React from "react";
import * as Types from "./types";

declare function PVideoDetail(props: {
  as?: React.ElementType;
  vidSrc?: Types.Embed.Video;
  rank?: Types.Visibility.VisibilityConditions;
  rankMoreClick?: Types.Devlink.RuntimeProps;
  rankQty?: React.ReactNode;
  rankLessClick?: Types.Devlink.RuntimeProps;
  gttrPin?: Types.Visibility.VisibilityConditions;
  gttrBookmark?: Types.Visibility.VisibilityConditions;
  postMoreClick?: Types.Devlink.RuntimeProps;
  postTime?: React.ReactNode;
  titleSrc?: React.ReactNode;
  bodySrc?: React.ReactNode;
  bodyAcrd?: Types.Visibility.VisibilityConditions;
  bodyAcrdClick?: Types.Devlink.RuntimeProps;
  bodyAcrdTxtSrc?: React.ReactNode;
  bodyAcrdIcnSrc?: React.ReactNode;
  media?: Types.Visibility.VisibilityConditions;
  mediaMap?: Types.Devlink.Slot;
  mediaExample?: Types.Visibility.VisibilityConditions;
  atrb?: Types.Visibility.VisibilityConditions;
  atrbAvtr?: Types.Asset.Image;
  atrbAvtrAlt?: Types.Basic.AltText;
  atrbName?: React.ReactNode;
  atrbBdg?: Types.Visibility.VisibilityConditions;
  atrbStat1Icn?: Types.Visibility.VisibilityConditions;
  atrbStat1TxtSrc?: React.ReactNode;
  atrbClick?: Types.Devlink.RuntimeProps;
  act?: Types.Visibility.VisibilityConditions;
  actLike?: Types.Visibility.VisibilityConditions;
  actLikeQty?: Types.Visibility.VisibilityConditions;
  actLikeQtySrc?: React.ReactNode;
  actLikeIcnSrc?: React.ReactNode;
  actLikeClick?: Types.Devlink.RuntimeProps;
  actComment?: Types.Visibility.VisibilityConditions;
  actCommentQty?: Types.Visibility.VisibilityConditions;
  actCommentQtySrc?: React.ReactNode;
  actCommentIcnSrc?: React.ReactNode;
  actCommentClick?: Types.Devlink.RuntimeProps;
  actShare?: Types.Visibility.VisibilityConditions;
  actShareClick?: Types.Devlink.RuntimeProps;
  actBookmark?: Types.Visibility.VisibilityConditions;
  actBookmarkIcnSrc?: React.ReactNode;
  actBookmarkClick?: Types.Devlink.RuntimeProps;
  resp?: Types.Visibility.VisibilityConditions;
  respQty?: React.ReactNode;
  respName?: React.ReactNode;
  respList?: Types.Visibility.VisibilityConditions;
  respListMap?: Types.Devlink.Slot;
  respItemExample?: Types.Visibility.VisibilityConditions;
  respEmpty?: Types.Visibility.VisibilityConditions;
  respEmptyClick?: Types.Devlink.RuntimeProps;
  itmHead?: Types.Visibility.VisibilityConditions;
  itmImgSrc?: Types.Asset.Image;
  itmName?: React.ReactNode;
  popular?: Types.Visibility.VisibilityConditions;
  popMap?: Types.Devlink.Slot;
  popExample?: Types.Visibility.VisibilityConditions;
}): React.JSX.Element;
